// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  angular.module('piScanner', []).service('spinner', function() {
    var default_opts, spinners;
    default_opts = {
      lines: 9,
      length: 8,
      width: 4,
      radius: 6,
      corners: 1,
      rotate: 0,
      direction: 1,
      color: '#000',
      speed: 1,
      trail: 28,
      shadow: false,
      hwaccel: false,
      className: 'spinner',
      zIndex: 2e9,
      top: '17px'
    };
    spinners = {
      range: {
        opts: {
          left: '75px'
        },
        target: function() {
          return document.getElementById('range-spinner');
        }
      },
      scan: {
        opts: {
          left: '53px'
        },
        target: function() {
          return document.getElementById('scan-spinner');
        }
      }
    };
    return {
      start: function(s) {
        if ('spinner' in spinners[s]) {
          return spinners[s].spinner.spin(spinners[s].target());
        } else {
          spinners[s].spinner = new Spinner(angular.extend(default_opts, spinners[s].opts));
          return spinners[s].spinner.spin(spinners[s].target());
        }
      },
      stop: function(s) {
        if ('spinner' in spinners[s]) {
          return spinners[s].spinner.stop();
        }
      }
    };
  }).controller('mainCtrl', function($scope, $http, spinner) {
    $scope.query = {
      sequence: '',
      range_start: '',
      range_end: ''
    };
    $scope.state = {
      scan_active: false,
      range_active: false
    };
    $scope.response = {
      scan: null,
      scan_error: '',
      range: null,
      range_error: ''
    };
    $scope.$watch('state.scan_active', function(active) {
      if (active) {
        return spinner.start('scan');
      } else {
        return spinner.stop('scan');
      }
    });
    $scope.$watch('state.range_active', function(active) {
      if (active) {
        return spinner.start('range');
      } else {
        return spinner.stop('range');
      }
    });
    $scope.scan = function() {
      var query, req;
      $scope.response.scan = null;
      $scope.response.scan_error = '';
      $scope.state.scan_active = true;
      query = $scope.query.sequence.replace(/\s/g, '');
      if (!query.length) {
        return;
      }
      req = $http.get("/find/" + query);
      req.then(function(data, status, headers, config) {
        $scope.state.scan_active = false;
        return $scope.response.scan = data.data;
      });
      return req.error(function(data, status, headers, config) {
        $scope.state.scan_active = false;
        switch (status) {
          case 400:
            return $scope.response.scan_error = 'I can\'t scan for that! Digits only please.';
          default:
            return $scope.response.scan_error = 'Uh oh, something went wrong, might have been an issue with the server, like it might be trying to deal with too many requests just now.';
        }
      });
    };
    return $scope.range = function() {
      var query_end, query_start, req;
      $scope.response.range = null;
      $scope.response.range_error = null;
      $scope.state.range_active = true;
      query_start = String($scope.query.range_start).replace(/\s/g, '');
      query_end = String($scope.query.range_end).replace(/\s/g, '');
      if (!query_start.length) {
        $scope.query.range_start = query_start = 0;
      }
      if (!query_end.length) {
        $scope.query.range_end = query_end = query_start + 10000;
      }
      req = $http.get("/range/" + query_start + ":" + query_end);
      req.then(function(data, status, headers, config) {
        $scope.state.range_active = false;
        $scope.response.range = data.data;
        $scope.response.range.start = $scope.response.range.query[0];
        return $scope.response.range.end = $scope.response.range.query[1];
      });
      return req.error(function(data, status, headers, config) {
        $scope.state.range_active = false;
        switch (status) {
          case 422:
            return $scope.response.range_error = 'Invalid range: the end position needs to be after the start position, and they both need to be position';
          case 403:
            return $scope.response.range_error = 'Sorry, you can only request up to 100000 digits at a time';
          default:
            return $scope.response.range_error = 'Uh oh, something went wrong, might have been an issue with the server';
        }
      });
    };
  });

}).call(this);
